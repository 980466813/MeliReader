// Generated by Dagger (https://google.github.io/dagger).
package com.lning.melireader.presenter;

import com.lning.melireader.model.impl.CommentModel;
import com.lning.melireader.model.impl.LikeModel;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class NewsCommentDetailPresenter_Factory
    implements Factory<NewsCommentDetailPresenter> {
  private final Provider<CommentModel> mMvpModelProvider;

  private final Provider<LikeModel> likeModelProvider;

  public NewsCommentDetailPresenter_Factory(
      Provider<CommentModel> mMvpModelProvider, Provider<LikeModel> likeModelProvider) {
    this.mMvpModelProvider = mMvpModelProvider;
    this.likeModelProvider = likeModelProvider;
  }

  @Override
  public NewsCommentDetailPresenter get() {
    NewsCommentDetailPresenter instance = new NewsCommentDetailPresenter(mMvpModelProvider.get());
    NewsCommentDetailPresenter_MembersInjector.injectLikeModel(instance, likeModelProvider.get());
    return instance;
  }

  public static NewsCommentDetailPresenter_Factory create(
      Provider<CommentModel> mMvpModelProvider, Provider<LikeModel> likeModelProvider) {
    return new NewsCommentDetailPresenter_Factory(mMvpModelProvider, likeModelProvider);
  }

  public static NewsCommentDetailPresenter newNewsCommentDetailPresenter(CommentModel mMvpModel) {
    return new NewsCommentDetailPresenter(mMvpModel);
  }
}
