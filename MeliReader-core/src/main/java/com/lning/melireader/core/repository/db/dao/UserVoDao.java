package com.lning.melireader.core.repository.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lning.melireader.core.repository.db.converter.DateConverter;
import com.lning.melireader.core.repository.db.converter.UserItemListConverter;
import com.lning.melireader.core.repository.http.bean.ItemListVo;
import java.util.Date;

import com.lning.melireader.core.repository.http.bean.UserVo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_VO".
*/
public class UserVoDao extends AbstractDao<UserVo, Long> {

    public static final String TABLENAME = "USER_VO";

    /**
     * Properties of entity UserVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LocalDbId = new Property(0, Long.class, "localDbId", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Rid = new Property(2, Long.class, "rid", false, "RID");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Nickname = new Property(4, String.class, "nickname", false, "NICKNAME");
        public final static Property Profile = new Property(5, String.class, "profile", false, "PROFILE");
        public final static Property Experience = new Property(6, int.class, "experience", false, "EXPERIENCE");
        public final static Property AttentionCount = new Property(7, int.class, "attentionCount", false, "ATTENTION_COUNT");
        public final static Property FansCount = new Property(8, int.class, "fansCount", false, "FANS_COUNT");
        public final static Property Level = new Property(9, int.class, "level", false, "LEVEL");
        public final static Property UpperLimit = new Property(10, int.class, "upperLimit", false, "UPPER_LIMIT");
        public final static Property LevelName = new Property(11, String.class, "levelName", false, "LEVEL_NAME");
        public final static Property Subscripted = new Property(12, boolean.class, "subscripted", false, "SUBSCRIPTED");
        public final static Property ItemListVo = new Property(13, String.class, "itemListVo", false, "ITEM_LIST_VO");
        public final static Property Type = new Property(14, String.class, "type", false, "TYPE");
        public final static Property Token = new Property(15, String.class, "token", false, "TOKEN");
        public final static Property FavouriteChannels = new Property(16, String.class, "favouriteChannels", false, "FAVOURITE_CHANNELS");
        public final static Property Birthday = new Property(17, Long.class, "birthday", false, "BIRTHDAY");
        public final static Property Address = new Property(18, String.class, "address", false, "ADDRESS");
        public final static Property Signature = new Property(19, String.class, "signature", false, "SIGNATURE");
        public final static Property Gender = new Property(20, byte.class, "gender", false, "GENDER");
    }

    private final UserItemListConverter itemListVoConverter = new UserItemListConverter();
    private final DateConverter birthdayConverter = new DateConverter();

    public UserVoDao(DaoConfig config) {
        super(config);
    }
    
    public UserVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_VO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localDbId
                "\"ID\" TEXT NOT NULL ," + // 1: id
                "\"RID\" INTEGER NOT NULL ," + // 2: rid
                "\"USERNAME\" TEXT," + // 3: username
                "\"NICKNAME\" TEXT," + // 4: nickname
                "\"PROFILE\" TEXT," + // 5: profile
                "\"EXPERIENCE\" INTEGER NOT NULL ," + // 6: experience
                "\"ATTENTION_COUNT\" INTEGER NOT NULL ," + // 7: attentionCount
                "\"FANS_COUNT\" INTEGER NOT NULL ," + // 8: fansCount
                "\"LEVEL\" INTEGER NOT NULL ," + // 9: level
                "\"UPPER_LIMIT\" INTEGER NOT NULL ," + // 10: upperLimit
                "\"LEVEL_NAME\" TEXT," + // 11: levelName
                "\"SUBSCRIPTED\" INTEGER NOT NULL ," + // 12: subscripted
                "\"ITEM_LIST_VO\" TEXT," + // 13: itemListVo
                "\"TYPE\" TEXT NOT NULL ," + // 14: type
                "\"TOKEN\" TEXT NOT NULL ," + // 15: token
                "\"FAVOURITE_CHANNELS\" TEXT NOT NULL ," + // 16: favouriteChannels
                "\"BIRTHDAY\" INTEGER," + // 17: birthday
                "\"ADDRESS\" TEXT," + // 18: address
                "\"SIGNATURE\" TEXT," + // 19: signature
                "\"GENDER\" INTEGER NOT NULL );"); // 20: gender
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_VO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserVo entity) {
        stmt.clearBindings();
 
        Long localDbId = entity.getLocalDbId();
        if (localDbId != null) {
            stmt.bindLong(1, localDbId);
        }
        stmt.bindString(2, entity.getId());
        stmt.bindLong(3, entity.getRid());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String profile = entity.getProfile();
        if (profile != null) {
            stmt.bindString(6, profile);
        }
        stmt.bindLong(7, entity.getExperience());
        stmt.bindLong(8, entity.getAttentionCount());
        stmt.bindLong(9, entity.getFansCount());
        stmt.bindLong(10, entity.getLevel());
        stmt.bindLong(11, entity.getUpperLimit());
 
        String levelName = entity.getLevelName();
        if (levelName != null) {
            stmt.bindString(12, levelName);
        }
        stmt.bindLong(13, entity.getSubscripted() ? 1L: 0L);
 
        ItemListVo itemListVo = entity.getItemListVo();
        if (itemListVo != null) {
            stmt.bindString(14, itemListVoConverter.convertToDatabaseValue(itemListVo));
        }
        stmt.bindString(15, entity.getType());
        stmt.bindString(16, entity.getToken());
        stmt.bindString(17, entity.getFavouriteChannels());
 
        Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(18, birthdayConverter.convertToDatabaseValue(birthday));
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(19, address);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(20, signature);
        }
        stmt.bindLong(21, entity.getGender());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserVo entity) {
        stmt.clearBindings();
 
        Long localDbId = entity.getLocalDbId();
        if (localDbId != null) {
            stmt.bindLong(1, localDbId);
        }
        stmt.bindString(2, entity.getId());
        stmt.bindLong(3, entity.getRid());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String profile = entity.getProfile();
        if (profile != null) {
            stmt.bindString(6, profile);
        }
        stmt.bindLong(7, entity.getExperience());
        stmt.bindLong(8, entity.getAttentionCount());
        stmt.bindLong(9, entity.getFansCount());
        stmt.bindLong(10, entity.getLevel());
        stmt.bindLong(11, entity.getUpperLimit());
 
        String levelName = entity.getLevelName();
        if (levelName != null) {
            stmt.bindString(12, levelName);
        }
        stmt.bindLong(13, entity.getSubscripted() ? 1L: 0L);
 
        ItemListVo itemListVo = entity.getItemListVo();
        if (itemListVo != null) {
            stmt.bindString(14, itemListVoConverter.convertToDatabaseValue(itemListVo));
        }
        stmt.bindString(15, entity.getType());
        stmt.bindString(16, entity.getToken());
        stmt.bindString(17, entity.getFavouriteChannels());
 
        Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(18, birthdayConverter.convertToDatabaseValue(birthday));
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(19, address);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(20, signature);
        }
        stmt.bindLong(21, entity.getGender());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserVo readEntity(Cursor cursor, int offset) {
        UserVo entity = new UserVo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localDbId
            cursor.getString(offset + 1), // id
            cursor.getLong(offset + 2), // rid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // profile
            cursor.getInt(offset + 6), // experience
            cursor.getInt(offset + 7), // attentionCount
            cursor.getInt(offset + 8), // fansCount
            cursor.getInt(offset + 9), // level
            cursor.getInt(offset + 10), // upperLimit
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // levelName
            cursor.getShort(offset + 12) != 0, // subscripted
            cursor.isNull(offset + 13) ? null : itemListVoConverter.convertToEntityProperty(cursor.getString(offset + 13)), // itemListVo
            cursor.getString(offset + 14), // type
            cursor.getString(offset + 15), // token
            cursor.getString(offset + 16), // favouriteChannels
            cursor.isNull(offset + 17) ? null : birthdayConverter.convertToEntityProperty(cursor.getLong(offset + 17)), // birthday
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // address
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // signature
            (byte) cursor.getShort(offset + 20) // gender
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserVo entity, int offset) {
        entity.setLocalDbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getString(offset + 1));
        entity.setRid(cursor.getLong(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProfile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExperience(cursor.getInt(offset + 6));
        entity.setAttentionCount(cursor.getInt(offset + 7));
        entity.setFansCount(cursor.getInt(offset + 8));
        entity.setLevel(cursor.getInt(offset + 9));
        entity.setUpperLimit(cursor.getInt(offset + 10));
        entity.setLevelName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSubscripted(cursor.getShort(offset + 12) != 0);
        entity.setItemListVo(cursor.isNull(offset + 13) ? null : itemListVoConverter.convertToEntityProperty(cursor.getString(offset + 13)));
        entity.setType(cursor.getString(offset + 14));
        entity.setToken(cursor.getString(offset + 15));
        entity.setFavouriteChannels(cursor.getString(offset + 16));
        entity.setBirthday(cursor.isNull(offset + 17) ? null : birthdayConverter.convertToEntityProperty(cursor.getLong(offset + 17)));
        entity.setAddress(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSignature(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setGender((byte) cursor.getShort(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserVo entity, long rowId) {
        entity.setLocalDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserVo entity) {
        if(entity != null) {
            return entity.getLocalDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserVo entity) {
        return entity.getLocalDbId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
