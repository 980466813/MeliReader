// Generated by Dagger (https://google.github.io/dagger).
package com.lning.melireader.presenter;

import com.lning.melireader.model.impl.ContentModel;
import com.lning.melireader.model.impl.FavouriteModel;
import com.lning.melireader.model.impl.UserModel;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class LauncherPresenter_Factory implements Factory<LauncherPresenter> {
  private final Provider<ContentModel> mMvpModelProvider;

  private final Provider<UserModel> userModelProvider;

  private final Provider<FavouriteModel> favouriteModelProvider;

  public LauncherPresenter_Factory(
      Provider<ContentModel> mMvpModelProvider,
      Provider<UserModel> userModelProvider,
      Provider<FavouriteModel> favouriteModelProvider) {
    this.mMvpModelProvider = mMvpModelProvider;
    this.userModelProvider = userModelProvider;
    this.favouriteModelProvider = favouriteModelProvider;
  }

  @Override
  public LauncherPresenter get() {
    LauncherPresenter instance = new LauncherPresenter(mMvpModelProvider.get());
    LauncherPresenter_MembersInjector.injectUserModel(instance, userModelProvider.get());
    LauncherPresenter_MembersInjector.injectFavouriteModel(instance, favouriteModelProvider.get());
    return instance;
  }

  public static LauncherPresenter_Factory create(
      Provider<ContentModel> mMvpModelProvider,
      Provider<UserModel> userModelProvider,
      Provider<FavouriteModel> favouriteModelProvider) {
    return new LauncherPresenter_Factory(
        mMvpModelProvider, userModelProvider, favouriteModelProvider);
  }

  public static LauncherPresenter newLauncherPresenter(ContentModel mMvpModel) {
    return new LauncherPresenter(mMvpModel);
  }
}
