// Generated by Dagger (https://google.github.io/dagger).
package com.lning.melireader.app.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import me.drakeet.multitype.Items;
import me.drakeet.multitype.MultiTypeAdapter;

public final class FragmentModule_ProvideMultiTypeAdapterFactory
    implements Factory<MultiTypeAdapter> {
  private final FragmentModule module;

  private final Provider<Items> itemsProvider;

  public FragmentModule_ProvideMultiTypeAdapterFactory(
      FragmentModule module, Provider<Items> itemsProvider) {
    this.module = module;
    this.itemsProvider = itemsProvider;
  }

  @Override
  public MultiTypeAdapter get() {
    return Preconditions.checkNotNull(
        module.provideMultiTypeAdapter(itemsProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static FragmentModule_ProvideMultiTypeAdapterFactory create(
      FragmentModule module, Provider<Items> itemsProvider) {
    return new FragmentModule_ProvideMultiTypeAdapterFactory(module, itemsProvider);
  }

  public static MultiTypeAdapter proxyProvideMultiTypeAdapter(
      FragmentModule instance, Items items) {
    return Preconditions.checkNotNull(
        instance.provideMultiTypeAdapter(items),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
