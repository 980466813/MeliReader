// Generated by Dagger (https://google.github.io/dagger).
package com.lning.melireader.core.app.di.module;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class ClientModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final Provider<Application> applicationProvider;

  private final Provider<Retrofit.Builder> builderProvider;

  private final Provider<HttpUrl> httpUrlProvider;

  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<ClientModule.RetrofitConfiguration> configurationProvider;

  public ClientModule_ProvideRetrofitFactory(
      Provider<Application> applicationProvider,
      Provider<Retrofit.Builder> builderProvider,
      Provider<HttpUrl> httpUrlProvider,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<ClientModule.RetrofitConfiguration> configurationProvider) {
    this.applicationProvider = applicationProvider;
    this.builderProvider = builderProvider;
    this.httpUrlProvider = httpUrlProvider;
    this.okHttpClientProvider = okHttpClientProvider;
    this.configurationProvider = configurationProvider;
  }

  @Override
  public Retrofit get() {
    return Preconditions.checkNotNull(
        ClientModule.provideRetrofit(
            applicationProvider.get(),
            builderProvider.get(),
            httpUrlProvider.get(),
            okHttpClientProvider.get(),
            configurationProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ClientModule_ProvideRetrofitFactory create(
      Provider<Application> applicationProvider,
      Provider<Retrofit.Builder> builderProvider,
      Provider<HttpUrl> httpUrlProvider,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<ClientModule.RetrofitConfiguration> configurationProvider) {
    return new ClientModule_ProvideRetrofitFactory(
        applicationProvider,
        builderProvider,
        httpUrlProvider,
        okHttpClientProvider,
        configurationProvider);
  }

  public static Retrofit proxyProvideRetrofit(
      Application application,
      Retrofit.Builder builder,
      HttpUrl httpUrl,
      OkHttpClient okHttpClient,
      ClientModule.RetrofitConfiguration configuration) {
    return Preconditions.checkNotNull(
        ClientModule.provideRetrofit(application, builder, httpUrl, okHttpClient, configuration),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
