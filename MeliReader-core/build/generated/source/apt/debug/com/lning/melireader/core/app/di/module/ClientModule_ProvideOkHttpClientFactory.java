// Generated by Dagger (https://google.github.io/dagger).
package com.lning.melireader.core.app.di.module;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.List;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;

public final class ClientModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<Application> applicationProvider;

  private final Provider<OkHttpClient.Builder> builderProvider;

  private final Provider<ClientModule.OkHttpConfiguration> configurationProvider;

  private final Provider<Interceptor> requestInterceptorProvider;

  private final Provider<Interceptor> debugInterceptorProvider;

  private final Provider<List<Interceptor>> interceptorsProvider;

  public ClientModule_ProvideOkHttpClientFactory(
      Provider<Application> applicationProvider,
      Provider<OkHttpClient.Builder> builderProvider,
      Provider<ClientModule.OkHttpConfiguration> configurationProvider,
      Provider<Interceptor> requestInterceptorProvider,
      Provider<Interceptor> debugInterceptorProvider,
      Provider<List<Interceptor>> interceptorsProvider) {
    this.applicationProvider = applicationProvider;
    this.builderProvider = builderProvider;
    this.configurationProvider = configurationProvider;
    this.requestInterceptorProvider = requestInterceptorProvider;
    this.debugInterceptorProvider = debugInterceptorProvider;
    this.interceptorsProvider = interceptorsProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        ClientModule.provideOkHttpClient(
            applicationProvider.get(),
            builderProvider.get(),
            configurationProvider.get(),
            requestInterceptorProvider.get(),
            debugInterceptorProvider.get(),
            interceptorsProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ClientModule_ProvideOkHttpClientFactory create(
      Provider<Application> applicationProvider,
      Provider<OkHttpClient.Builder> builderProvider,
      Provider<ClientModule.OkHttpConfiguration> configurationProvider,
      Provider<Interceptor> requestInterceptorProvider,
      Provider<Interceptor> debugInterceptorProvider,
      Provider<List<Interceptor>> interceptorsProvider) {
    return new ClientModule_ProvideOkHttpClientFactory(
        applicationProvider,
        builderProvider,
        configurationProvider,
        requestInterceptorProvider,
        debugInterceptorProvider,
        interceptorsProvider);
  }

  public static OkHttpClient proxyProvideOkHttpClient(
      Application application,
      OkHttpClient.Builder builder,
      ClientModule.OkHttpConfiguration configuration,
      Interceptor requestInterceptor,
      Interceptor debugInterceptor,
      List<Interceptor> interceptors) {
    return Preconditions.checkNotNull(
        ClientModule.provideOkHttpClient(
            application,
            builder,
            configuration,
            requestInterceptor,
            debugInterceptor,
            interceptors),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
