package com.lning.melireader.core.repository.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lning.melireader.core.repository.db.converter.DateConverter;
import java.util.Date;

import com.lning.melireader.core.repository.http.bean.NewsListVo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_LIST_VO".
*/
public class NewsListVoDao extends AbstractDao<NewsListVo, String> {

    public static final String TABLENAME = "NEWS_LIST_VO";

    /**
     * Properties of entity NewsListVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Summary = new Property(2, String.class, "summary", false, "SUMMARY");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property ChannelId = new Property(4, String.class, "channelId", false, "CHANNEL_ID");
        public final static Property DislikeIds = new Property(5, String.class, "dislikeIds", false, "DISLIKE_IDS");
        public final static Property DislikeNames = new Property(6, String.class, "dislikeNames", false, "DISLIKE_NAMES");
        public final static Property Source = new Property(7, String.class, "source", false, "SOURCE");
        public final static Property Dsource = new Property(8, String.class, "dsource", false, "DSOURCE");
        public final static Property PublisherName = new Property(9, String.class, "publisherName", false, "PUBLISHER_NAME");
        public final static Property PublisherProfile = new Property(10, String.class, "publisherProfile", false, "PUBLISHER_PROFILE");
        public final static Property Created = new Property(11, Long.class, "created", false, "CREATED");
        public final static Property Ctype = new Property(12, String.class, "ctype", false, "CTYPE");
        public final static Property CommentCount = new Property(13, int.class, "commentCount", false, "COMMENT_COUNT");
        public final static Property Read = new Property(14, boolean.class, "read", false, "READ");
        public final static Property Subscripted = new Property(15, boolean.class, "subscripted", false, "SUBSCRIPTED");
    }

    private final DateConverter createdConverter = new DateConverter();

    public NewsListVoDao(DaoConfig config) {
        super(config);
    }
    
    public NewsListVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_LIST_VO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"SUMMARY\" TEXT," + // 2: summary
                "\"IMAGE\" TEXT," + // 3: image
                "\"CHANNEL_ID\" TEXT NOT NULL ," + // 4: channelId
                "\"DISLIKE_IDS\" TEXT," + // 5: dislikeIds
                "\"DISLIKE_NAMES\" TEXT," + // 6: dislikeNames
                "\"SOURCE\" TEXT," + // 7: source
                "\"DSOURCE\" TEXT," + // 8: dsource
                "\"PUBLISHER_NAME\" TEXT," + // 9: publisherName
                "\"PUBLISHER_PROFILE\" TEXT," + // 10: publisherProfile
                "\"CREATED\" INTEGER," + // 11: created
                "\"CTYPE\" TEXT," + // 12: ctype
                "\"COMMENT_COUNT\" INTEGER NOT NULL ," + // 13: commentCount
                "\"READ\" INTEGER NOT NULL ," + // 14: read
                "\"SUBSCRIPTED\" INTEGER NOT NULL );"); // 15: subscripted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_LIST_VO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsListVo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(3, summary);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
        stmt.bindString(5, entity.getChannelId());
 
        String dislikeIds = entity.getDislikeIds();
        if (dislikeIds != null) {
            stmt.bindString(6, dislikeIds);
        }
 
        String dislikeNames = entity.getDislikeNames();
        if (dislikeNames != null) {
            stmt.bindString(7, dislikeNames);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(8, source);
        }
 
        String dsource = entity.getDsource();
        if (dsource != null) {
            stmt.bindString(9, dsource);
        }
 
        String publisherName = entity.getPublisherName();
        if (publisherName != null) {
            stmt.bindString(10, publisherName);
        }
 
        String publisherProfile = entity.getPublisherProfile();
        if (publisherProfile != null) {
            stmt.bindString(11, publisherProfile);
        }
 
        Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(12, createdConverter.convertToDatabaseValue(created));
        }
 
        String ctype = entity.getCtype();
        if (ctype != null) {
            stmt.bindString(13, ctype);
        }
        stmt.bindLong(14, entity.getCommentCount());
        stmt.bindLong(15, entity.getRead() ? 1L: 0L);
        stmt.bindLong(16, entity.getSubscripted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsListVo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(3, summary);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
        stmt.bindString(5, entity.getChannelId());
 
        String dislikeIds = entity.getDislikeIds();
        if (dislikeIds != null) {
            stmt.bindString(6, dislikeIds);
        }
 
        String dislikeNames = entity.getDislikeNames();
        if (dislikeNames != null) {
            stmt.bindString(7, dislikeNames);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(8, source);
        }
 
        String dsource = entity.getDsource();
        if (dsource != null) {
            stmt.bindString(9, dsource);
        }
 
        String publisherName = entity.getPublisherName();
        if (publisherName != null) {
            stmt.bindString(10, publisherName);
        }
 
        String publisherProfile = entity.getPublisherProfile();
        if (publisherProfile != null) {
            stmt.bindString(11, publisherProfile);
        }
 
        Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(12, createdConverter.convertToDatabaseValue(created));
        }
 
        String ctype = entity.getCtype();
        if (ctype != null) {
            stmt.bindString(13, ctype);
        }
        stmt.bindLong(14, entity.getCommentCount());
        stmt.bindLong(15, entity.getRead() ? 1L: 0L);
        stmt.bindLong(16, entity.getSubscripted() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NewsListVo readEntity(Cursor cursor, int offset) {
        NewsListVo entity = new NewsListVo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // summary
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.getString(offset + 4), // channelId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dislikeIds
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dislikeNames
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // source
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dsource
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // publisherName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // publisherProfile
            cursor.isNull(offset + 11) ? null : createdConverter.convertToEntityProperty(cursor.getLong(offset + 11)), // created
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ctype
            cursor.getInt(offset + 13), // commentCount
            cursor.getShort(offset + 14) != 0, // read
            cursor.getShort(offset + 15) != 0 // subscripted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsListVo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setSummary(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChannelId(cursor.getString(offset + 4));
        entity.setDislikeIds(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDislikeNames(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSource(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDsource(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPublisherName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPublisherProfile(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreated(cursor.isNull(offset + 11) ? null : createdConverter.convertToEntityProperty(cursor.getLong(offset + 11)));
        entity.setCtype(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCommentCount(cursor.getInt(offset + 13));
        entity.setRead(cursor.getShort(offset + 14) != 0);
        entity.setSubscripted(cursor.getShort(offset + 15) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(NewsListVo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(NewsListVo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewsListVo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
