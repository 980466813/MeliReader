package com.lning.melireader.core.repository.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lning.melireader.core.repository.db.converter.DateConverter;
import com.lning.melireader.core.repository.http.bean.NewsListVo;
import java.util.Date;

import com.lning.melireader.core.repository.db.pojo.CollectionPojo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECTION_POJO".
*/
public class CollectionPojoDao extends AbstractDao<CollectionPojo, Long> {

    public static final String TABLENAME = "COLLECTION_POJO";

    /**
     * Properties of entity CollectionPojo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CollectionId = new Property(0, Long.class, "collectionId", true, "_id");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property NewsId = new Property(3, String.class, "newsId", false, "NEWS_ID");
        public final static Property Tag = new Property(4, String.class, "tag", false, "TAG");
        public final static Property Ctype = new Property(5, String.class, "ctype", false, "CTYPE");
        public final static Property Created = new Property(6, Long.class, "created", false, "CREATED");
        public final static Property Updated = new Property(7, Long.class, "updated", false, "UPDATED");
    }

    private DaoSession daoSession;

    private final DateConverter createdConverter = new DateConverter();
    private final DateConverter updatedConverter = new DateConverter();

    public CollectionPojoDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionPojoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION_POJO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: collectionId
                "\"ID\" INTEGER," + // 1: id
                "\"USER_ID\" TEXT NOT NULL ," + // 2: userId
                "\"NEWS_ID\" TEXT," + // 3: newsId
                "\"TAG\" TEXT," + // 4: tag
                "\"CTYPE\" TEXT," + // 5: ctype
                "\"CREATED\" INTEGER," + // 6: created
                "\"UPDATED\" INTEGER);"); // 7: updated
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION_POJO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectionPojo entity) {
        stmt.clearBindings();
 
        Long collectionId = entity.getCollectionId();
        if (collectionId != null) {
            stmt.bindLong(1, collectionId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
        stmt.bindString(3, entity.getUserId());
 
        String newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindString(4, newsId);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(5, tag);
        }
 
        String ctype = entity.getCtype();
        if (ctype != null) {
            stmt.bindString(6, ctype);
        }
 
        Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(7, createdConverter.convertToDatabaseValue(created));
        }
 
        Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(8, updatedConverter.convertToDatabaseValue(updated));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectionPojo entity) {
        stmt.clearBindings();
 
        Long collectionId = entity.getCollectionId();
        if (collectionId != null) {
            stmt.bindLong(1, collectionId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
        stmt.bindString(3, entity.getUserId());
 
        String newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindString(4, newsId);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(5, tag);
        }
 
        String ctype = entity.getCtype();
        if (ctype != null) {
            stmt.bindString(6, ctype);
        }
 
        Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(7, createdConverter.convertToDatabaseValue(created));
        }
 
        Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(8, updatedConverter.convertToDatabaseValue(updated));
        }
    }

    @Override
    protected final void attachEntity(CollectionPojo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CollectionPojo readEntity(Cursor cursor, int offset) {
        CollectionPojo entity = new CollectionPojo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // collectionId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // newsId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ctype
            cursor.isNull(offset + 6) ? null : createdConverter.convertToEntityProperty(cursor.getLong(offset + 6)), // created
            cursor.isNull(offset + 7) ? null : updatedConverter.convertToEntityProperty(cursor.getLong(offset + 7)) // updated
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollectionPojo entity, int offset) {
        entity.setCollectionId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserId(cursor.getString(offset + 2));
        entity.setNewsId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCtype(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreated(cursor.isNull(offset + 6) ? null : createdConverter.convertToEntityProperty(cursor.getLong(offset + 6)));
        entity.setUpdated(cursor.isNull(offset + 7) ? null : updatedConverter.convertToEntityProperty(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CollectionPojo entity, long rowId) {
        entity.setCollectionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CollectionPojo entity) {
        if(entity != null) {
            return entity.getCollectionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CollectionPojo entity) {
        return entity.getCollectionId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getNewsListVoDao().getAllColumns());
            builder.append(" FROM COLLECTION_POJO T");
            builder.append(" LEFT JOIN NEWS_LIST_VO T0 ON T.\"NEWS_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CollectionPojo loadCurrentDeep(Cursor cursor, boolean lock) {
        CollectionPojo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        NewsListVo newsListVo = loadCurrentOther(daoSession.getNewsListVoDao(), cursor, offset);
        entity.setNewsListVo(newsListVo);

        return entity;    
    }

    public CollectionPojo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CollectionPojo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CollectionPojo> list = new ArrayList<CollectionPojo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CollectionPojo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CollectionPojo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
