// Generated by Dagger (https://google.github.io/dagger).
package com.lning.melireader.core.app.di.component;

import android.app.Application;
import android.support.v4.app.FragmentManager;
import com.lning.melireader.core.app.base.lifecycleable.AppDelegate;
import com.lning.melireader.core.app.base.lifecycleable.AppDelegate_MembersInjector;
import com.lning.melireader.core.app.base.lifecycleable.DefaultActivityLifecycleCallbacks;
import com.lning.melireader.core.app.base.lifecycleable.DefaultActivityLifecycleCallbacks_Factory;
import com.lning.melireader.core.app.di.module.AppModule_ProvideFragmentLifecyclesFactory;
import com.lning.melireader.core.app.di.module.AppModule_ProvideFragmentRxLifecycleCallbacksFactory;
import com.lning.melireader.core.app.di.module.ClientModule;
import com.lning.melireader.core.app.di.module.ClientModule_ProvideApiServiceFactory;
import com.lning.melireader.core.app.di.module.ClientModule_ProvideClientBuilderFactory;
import com.lning.melireader.core.app.di.module.ClientModule_ProvideDaoSessionFactory;
import com.lning.melireader.core.app.di.module.ClientModule_ProvideOkHttpClientFactory;
import com.lning.melireader.core.app.di.module.ClientModule_ProvideRetrofitBuilderFactory;
import com.lning.melireader.core.app.di.module.ClientModule_ProvideRetrofitFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvideDataValidatorsFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvideDatabaseInfoFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvideDebugFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvideHttpLoggerFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvideHttpUrlFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvideInterceptorsFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvideOkHttpConfigurationFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvideParamsAddersFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvidePreferencesInfoFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvideRequestsInterceptorLevelFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvideRetrofitConfigurationFactory;
import com.lning.melireader.core.app.di.module.GlobalConfigModule_ProvideValidateFactory;
import com.lning.melireader.core.repository.RepositoryManager;
import com.lning.melireader.core.repository.RepositoryManagerImpl;
import com.lning.melireader.core.repository.RepositoryManagerImpl_Factory;
import com.lning.melireader.core.repository.db.DatabaseHelperImpl;
import com.lning.melireader.core.repository.db.DatabaseHelperImpl_Factory;
import com.lning.melireader.core.repository.db.dao.DaoSession;
import com.lning.melireader.core.repository.http.HttpHelperImpl;
import com.lning.melireader.core.repository.http.HttpHelperImpl_Factory;
import com.lning.melireader.core.repository.http.interceptor.DebugInterceptor;
import com.lning.melireader.core.repository.http.interceptor.DebugInterceptor_Factory;
import com.lning.melireader.core.repository.http.interceptor.RequestInterceptor_Factory;
import com.lning.melireader.core.repository.http.log.HttpLogger;
import com.lning.melireader.core.repository.http.params.ParamsAdder;
import com.lning.melireader.core.repository.http.service.ApiService;
import com.lning.melireader.core.repository.http.validator.DataValidator;
import com.lning.melireader.core.repository.preference.PreferencesHelperImpl;
import com.lning.melireader.core.repository.preference.PreferencesHelperImpl_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import java.util.List;
import javax.inject.Provider;
import okhttp3.HttpUrl;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Application application;

  private Provider<FragmentManager.FragmentLifecycleCallbacks>
      provideFragmentRxLifecycleCallbacksProvider;

  private Provider<DefaultActivityLifecycleCallbacks> defaultActivityLifecycleCallbacksProvider;

  private Provider<Application> applicationProvider;

  private GlobalConfigModule_ProvidePreferencesInfoFactory providePreferencesInfoProvider;

  private Provider<PreferencesHelperImpl> preferencesHelperImplProvider;

  private Provider<Retrofit.Builder> provideRetrofitBuilderProvider;

  private Provider<HttpUrl> provideHttpUrlProvider;

  private Provider<OkHttpClient.Builder> provideClientBuilderProvider;

  private Provider<ClientModule.OkHttpConfiguration> provideOkHttpConfigurationProvider;

  private Provider<List<DataValidator>> provideDataValidatorsProvider;

  private Provider<List<ParamsAdder>> provideParamsAddersProvider;

  private Provider<Boolean> provideValidateProvider;

  private RequestInterceptor_Factory requestInterceptorProvider;

  private Provider<Interceptor> provideRequestInterceptorProvider;

  private Provider<Boolean> provideDebugProvider;

  private Provider<HttpLogger> provideHttpLoggerProvider;

  private Provider<DebugInterceptor.Level> provideRequestsInterceptorLevelProvider;

  private Provider<DebugInterceptor> debugInterceptorProvider;

  private Provider<List<Interceptor>> provideInterceptorsProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<ClientModule.RetrofitConfiguration> provideRetrofitConfigurationProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private Provider<HttpHelperImpl> httpHelperImplProvider;

  private GlobalConfigModule_ProvideDatabaseInfoFactory provideDatabaseInfoProvider;

  private Provider<DaoSession> provideDaoSessionProvider;

  private Provider<DatabaseHelperImpl> databaseHelperImplProvider;

  private Provider<RepositoryManagerImpl> repositoryManagerImplProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.application = builder.application;
    this.provideFragmentRxLifecycleCallbacksProvider =
        DoubleCheck.provider(AppModule_ProvideFragmentRxLifecycleCallbacksFactory.create());
    this.defaultActivityLifecycleCallbacksProvider =
        DoubleCheck.provider(
            DefaultActivityLifecycleCallbacks_Factory.create(
                provideFragmentRxLifecycleCallbacksProvider,
                AppModule_ProvideFragmentLifecyclesFactory.create()));
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.providePreferencesInfoProvider =
        GlobalConfigModule_ProvidePreferencesInfoFactory.create(builder.globalConfigModule);
    this.preferencesHelperImplProvider =
        DoubleCheck.provider(
            PreferencesHelperImpl_Factory.create(
                applicationProvider, providePreferencesInfoProvider));
    this.provideRetrofitBuilderProvider =
        DoubleCheck.provider(ClientModule_ProvideRetrofitBuilderFactory.create());
    this.provideHttpUrlProvider =
        DoubleCheck.provider(
            GlobalConfigModule_ProvideHttpUrlFactory.create(builder.globalConfigModule));
    this.provideClientBuilderProvider =
        DoubleCheck.provider(ClientModule_ProvideClientBuilderFactory.create());
    this.provideOkHttpConfigurationProvider =
        DoubleCheck.provider(
            GlobalConfigModule_ProvideOkHttpConfigurationFactory.create(
                builder.globalConfigModule));
    this.provideDataValidatorsProvider =
        DoubleCheck.provider(
            GlobalConfigModule_ProvideDataValidatorsFactory.create(builder.globalConfigModule));
    this.provideParamsAddersProvider =
        DoubleCheck.provider(
            GlobalConfigModule_ProvideParamsAddersFactory.create(builder.globalConfigModule));
    this.provideValidateProvider =
        DoubleCheck.provider(
            GlobalConfigModule_ProvideValidateFactory.create(builder.globalConfigModule));
    this.requestInterceptorProvider =
        RequestInterceptor_Factory.create(
            provideDataValidatorsProvider,
            provideParamsAddersProvider,
            provideValidateProvider,
            (Provider) preferencesHelperImplProvider);
    this.provideRequestInterceptorProvider =
        DoubleCheck.provider((Provider) requestInterceptorProvider);
    this.provideDebugProvider =
        DoubleCheck.provider(
            GlobalConfigModule_ProvideDebugFactory.create(builder.globalConfigModule));
    this.provideHttpLoggerProvider =
        DoubleCheck.provider(
            GlobalConfigModule_ProvideHttpLoggerFactory.create(builder.globalConfigModule));
    this.provideRequestsInterceptorLevelProvider =
        DoubleCheck.provider(
            GlobalConfigModule_ProvideRequestsInterceptorLevelFactory.create(
                builder.globalConfigModule));
    this.debugInterceptorProvider =
        DoubleCheck.provider(
            DebugInterceptor_Factory.create(
                provideDebugProvider,
                provideHttpLoggerProvider,
                provideRequestsInterceptorLevelProvider));
    this.provideInterceptorsProvider =
        DoubleCheck.provider(
            GlobalConfigModule_ProvideInterceptorsFactory.create(builder.globalConfigModule));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            ClientModule_ProvideOkHttpClientFactory.create(
                applicationProvider,
                provideClientBuilderProvider,
                provideOkHttpConfigurationProvider,
                provideRequestInterceptorProvider,
                (Provider) debugInterceptorProvider,
                provideInterceptorsProvider));
    this.provideRetrofitConfigurationProvider =
        DoubleCheck.provider(
            GlobalConfigModule_ProvideRetrofitConfigurationFactory.create(
                builder.globalConfigModule));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            ClientModule_ProvideRetrofitFactory.create(
                applicationProvider,
                provideRetrofitBuilderProvider,
                provideHttpUrlProvider,
                provideOkHttpClientProvider,
                provideRetrofitConfigurationProvider));
    this.provideApiServiceProvider =
        DoubleCheck.provider(ClientModule_ProvideApiServiceFactory.create(provideRetrofitProvider));
    this.httpHelperImplProvider =
        DoubleCheck.provider(HttpHelperImpl_Factory.create(provideApiServiceProvider));
    this.provideDatabaseInfoProvider =
        GlobalConfigModule_ProvideDatabaseInfoFactory.create(builder.globalConfigModule);
    this.provideDaoSessionProvider =
        DoubleCheck.provider(
            ClientModule_ProvideDaoSessionFactory.create(
                applicationProvider, provideDatabaseInfoProvider));
    this.databaseHelperImplProvider =
        DoubleCheck.provider(
            DatabaseHelperImpl_Factory.create(provideDaoSessionProvider, provideDebugProvider));
    this.repositoryManagerImplProvider =
        DoubleCheck.provider(
            RepositoryManagerImpl_Factory.create(
                (Provider) preferencesHelperImplProvider,
                (Provider) httpHelperImplProvider,
                (Provider) databaseHelperImplProvider));
  }

  @Override
  public Application application() {
    return application;
  }

  @Override
  public void inject(AppDelegate application) {
    injectAppDelegate(application);
  }

  @Override
  public RepositoryManager repositoryManager() {
    return repositoryManagerImplProvider.get();
  }

  private AppDelegate injectAppDelegate(AppDelegate instance) {
    AppDelegate_MembersInjector.injectMActivityLifecycle(
        instance, defaultActivityLifecycleCallbacksProvider.get());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private GlobalConfigModule globalConfigModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (globalConfigModule == null) {
        throw new IllegalStateException(
            GlobalConfigModule.class.getCanonicalName() + " must be set");
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public Builder globalConfigModule(GlobalConfigModule globalConfigModule) {
      this.globalConfigModule = Preconditions.checkNotNull(globalConfigModule);
      return this;
    }
  }
}
