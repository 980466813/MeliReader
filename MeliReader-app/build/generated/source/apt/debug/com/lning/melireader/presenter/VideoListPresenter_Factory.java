// Generated by Dagger (https://google.github.io/dagger).
package com.lning.melireader.presenter;

import com.lning.melireader.model.impl.AttentionModel;
import com.lning.melireader.model.impl.HistoryModel;
import com.lning.melireader.model.impl.NewsModel;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class VideoListPresenter_Factory implements Factory<VideoListPresenter> {
  private final Provider<NewsModel> mMvpModelProvider;

  private final Provider<HistoryModel> historyModelProvider;

  private final Provider<AttentionModel> attentionModelProvider;

  public VideoListPresenter_Factory(
      Provider<NewsModel> mMvpModelProvider,
      Provider<HistoryModel> historyModelProvider,
      Provider<AttentionModel> attentionModelProvider) {
    this.mMvpModelProvider = mMvpModelProvider;
    this.historyModelProvider = historyModelProvider;
    this.attentionModelProvider = attentionModelProvider;
  }

  @Override
  public VideoListPresenter get() {
    VideoListPresenter instance = new VideoListPresenter(mMvpModelProvider.get());
    VideoListPresenter_MembersInjector.injectHistoryModel(instance, historyModelProvider.get());
    VideoListPresenter_MembersInjector.injectAttentionModel(instance, attentionModelProvider.get());
    return instance;
  }

  public static VideoListPresenter_Factory create(
      Provider<NewsModel> mMvpModelProvider,
      Provider<HistoryModel> historyModelProvider,
      Provider<AttentionModel> attentionModelProvider) {
    return new VideoListPresenter_Factory(
        mMvpModelProvider, historyModelProvider, attentionModelProvider);
  }

  public static VideoListPresenter newVideoListPresenter(NewsModel mMvpModel) {
    return new VideoListPresenter(mMvpModel);
  }
}
