// Generated by Dagger (https://google.github.io/dagger).
package com.lning.melireader.presenter;

import com.lning.melireader.model.impl.HistoryModel;
import com.lning.melireader.model.impl.NewsModel;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class NewsListPresenter_Factory implements Factory<NewsListPresenter> {
  private final Provider<NewsModel> mMvpModelProvider;

  private final Provider<HistoryModel> historyModelProvider;

  public NewsListPresenter_Factory(
      Provider<NewsModel> mMvpModelProvider, Provider<HistoryModel> historyModelProvider) {
    this.mMvpModelProvider = mMvpModelProvider;
    this.historyModelProvider = historyModelProvider;
  }

  @Override
  public NewsListPresenter get() {
    NewsListPresenter instance = new NewsListPresenter(mMvpModelProvider.get());
    NewsListPresenter_MembersInjector.injectHistoryModel(instance, historyModelProvider.get());
    return instance;
  }

  public static NewsListPresenter_Factory create(
      Provider<NewsModel> mMvpModelProvider, Provider<HistoryModel> historyModelProvider) {
    return new NewsListPresenter_Factory(mMvpModelProvider, historyModelProvider);
  }

  public static NewsListPresenter newNewsListPresenter(NewsModel mMvpModel) {
    return new NewsListPresenter(mMvpModel);
  }
}
