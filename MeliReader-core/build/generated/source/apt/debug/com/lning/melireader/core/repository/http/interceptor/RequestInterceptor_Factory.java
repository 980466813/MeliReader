// Generated by Dagger (https://google.github.io/dagger).
package com.lning.melireader.core.repository.http.interceptor;

import com.lning.melireader.core.repository.http.params.ParamsAdder;
import com.lning.melireader.core.repository.http.validator.DataValidator;
import com.lning.melireader.core.repository.preference.PreferencesHelper;
import dagger.internal.Factory;
import java.util.List;
import javax.inject.Provider;

public final class RequestInterceptor_Factory implements Factory<RequestInterceptor> {
  private final Provider<List<DataValidator>> dataValidatorsProvider;

  private final Provider<List<ParamsAdder>> paramsAddersProvider;

  private final Provider<Boolean> validateProvider;

  private final Provider<PreferencesHelper> mPreferencesHelperProvider;

  public RequestInterceptor_Factory(
      Provider<List<DataValidator>> dataValidatorsProvider,
      Provider<List<ParamsAdder>> paramsAddersProvider,
      Provider<Boolean> validateProvider,
      Provider<PreferencesHelper> mPreferencesHelperProvider) {
    this.dataValidatorsProvider = dataValidatorsProvider;
    this.paramsAddersProvider = paramsAddersProvider;
    this.validateProvider = validateProvider;
    this.mPreferencesHelperProvider = mPreferencesHelperProvider;
  }

  @Override
  public RequestInterceptor get() {
    RequestInterceptor instance = new RequestInterceptor();
    RequestInterceptor_MembersInjector.injectDataValidators(instance, dataValidatorsProvider.get());
    RequestInterceptor_MembersInjector.injectParamsAdders(instance, paramsAddersProvider.get());
    RequestInterceptor_MembersInjector.injectValidate(instance, validateProvider.get());
    RequestInterceptor_MembersInjector.injectMPreferencesHelper(
        instance, mPreferencesHelperProvider.get());
    return instance;
  }

  public static RequestInterceptor_Factory create(
      Provider<List<DataValidator>> dataValidatorsProvider,
      Provider<List<ParamsAdder>> paramsAddersProvider,
      Provider<Boolean> validateProvider,
      Provider<PreferencesHelper> mPreferencesHelperProvider) {
    return new RequestInterceptor_Factory(
        dataValidatorsProvider, paramsAddersProvider, validateProvider, mPreferencesHelperProvider);
  }

  public static RequestInterceptor newRequestInterceptor() {
    return new RequestInterceptor();
  }
}
