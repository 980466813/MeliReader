// Generated by Dagger (https://google.github.io/dagger).
package com.lning.melireader.presenter;

import com.lning.melireader.model.impl.CommentModel;
import com.lning.melireader.model.impl.LikeModel;
import com.lning.melireader.model.impl.NewsModel;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class NewsCommentPresenter_Factory implements Factory<NewsCommentPresenter> {
  private final Provider<CommentModel> mMvpModelProvider;

  private final Provider<NewsModel> newsModelProvider;

  private final Provider<LikeModel> likeModelProvider;

  public NewsCommentPresenter_Factory(
      Provider<CommentModel> mMvpModelProvider,
      Provider<NewsModel> newsModelProvider,
      Provider<LikeModel> likeModelProvider) {
    this.mMvpModelProvider = mMvpModelProvider;
    this.newsModelProvider = newsModelProvider;
    this.likeModelProvider = likeModelProvider;
  }

  @Override
  public NewsCommentPresenter get() {
    NewsCommentPresenter instance = new NewsCommentPresenter(mMvpModelProvider.get());
    NewsCommentPresenter_MembersInjector.injectNewsModel(instance, newsModelProvider.get());
    NewsCommentPresenter_MembersInjector.injectLikeModel(instance, likeModelProvider.get());
    return instance;
  }

  public static NewsCommentPresenter_Factory create(
      Provider<CommentModel> mMvpModelProvider,
      Provider<NewsModel> newsModelProvider,
      Provider<LikeModel> likeModelProvider) {
    return new NewsCommentPresenter_Factory(
        mMvpModelProvider, newsModelProvider, likeModelProvider);
  }

  public static NewsCommentPresenter newNewsCommentPresenter(CommentModel mMvpModel) {
    return new NewsCommentPresenter(mMvpModel);
  }
}
